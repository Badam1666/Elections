import streamlit as st
import time
from datetime import datetime, timedelta
import pandas as pd
import matplotlib.pyplot as plt

st.set_page_config(page_title="Elections europ√©ennes", page_icon="üó≥Ô∏è", layout="centered", initial_sidebar_state="auto", menu_items=None)

def main():
    st.title("Bienvenue sur le site de Nostradamus")
    st.subheader("Les √©lections europ√©ennes √† votre port√©e")

    # Explication des √©lections europ√©ennes
    st.write("Les prochaines √©lections europ√©ennes auront lieu du 6 au 9 juin 2024. Vous ne savez pas trop comment ces √©lections fonctionnent et quels sont leurs enjeux ? Pas d'inqui√©tude, la team Nostradamus vous aide √† y voir plus clair !")
    st.write("- Tous les cinq ans, les citoyens des √âtats membres de l'Union europ√©enne votent pour √©lire leurs repr√©sentants au Parlement europ√©en.")
    st.write("- Chaque √âtat membre a un nombre de si√®ges proportionnel √† sa population.")
    st.write("- Les r√©sultats des √©lections europ√©ennes impactent directement le quotidien des citoyens de l'Union europ√©enne. C'est gr√¢ce au Parlement europ√©en que des d√©cisions cruciales pour notre environnement ont √©t√© prises, telles que l'interdiction des plastiques √† usage unique. De m√™me, le r√®glement g√©n√©ral sur la protection des donn√©es (RGPD), adopt√© par le Parlement europ√©en, renforce nos droits fondamentaux √† la vie priv√©e et √† la s√©curit√© des donn√©es dans un monde de plus en plus num√©ris√©.")
    st.write("Chaque vote aux √©lections europ√©ennes compte pour fa√ßonner un avenir plus durable, juste et s√ªr pour tous les citoyens europ√©ens !")


    # Box bleue avec lien pour v√©rifier le statut √©lectoral
    st.sidebar.markdown("<div style='background-color: #4169E1; padding: 8px; border-radius: 5px; margin-bottom: 10px;'>"
                        "<a style='color: white; text-decoration: none;' href='https://www.service-public.fr/particuliers/vosdroits/demarches-et-outils/ISE'>V√©rifiez votre statut √©lectoral !</a>"
                        "</div>", unsafe_allow_html=True)
    
    # Box jaune avec countdown
    st.sidebar.markdown("<div style='background-color: #FFD700; padding: 8px; border-radius: 5px;'>"
                        "<div style='color: black; font-size: small;'>"
                        "<h3>Temps restant avant la fin des inscriptions en ligne :</h3>"
                        "</div>"
                        "</div>", unsafe_allow_html=True)

    # Sur ce site
    st.subheader("Sur ce site")
    st.write("Bienvenue sur le site de Nostradamus, votre source d'informations essentielles sur les √©lections europ√©ennes. Sur notre plateforme, vous trouverez :")
    st.write("1. **Carte des R√©sultats** : Explorez une carte interactive des r√©sultats des √©lections europ√©ennes par d√©partement afin de visualiser les tendances politiques √† travers la France depuis 2004.")
    st.write("2. **R√©sultats par Commune** : Consultez les r√©sultats des √©lections europ√©ennes de 2014 et 2019 dans votre commune, vous donnant un aper√ßu d√©taill√© de la participation et des votes pour chaque parti politique.")
    st.write("3. **Pr√©sentation** : Notre pr√©sentation pour Le Wagon du 15 Mars 2024.")
    st.write("Notre objectif est de rendre les √©lections europ√©ennes accessibles √† tous, afin que chacun puisse prendre des d√©cisions √©clair√©es et participer pleinement √† la d√©mocratie europ√©enne.")

      
    
    # Nos pr√©dictions
    st.subheader("Nos pr√©dictions")
    st.write("Nous sommes des √©tudiants en Data Analyse √† Le Wagon, nous avons entrepris une d√©marche de collecte de donn√©es aupr√®s de Data gouv pour mener nos recherches. Notre objectif est de rendre les √©lections europ√©ennes accessibles √† tous, afin que chacun puisse comprendre les enjeux et participer activement √† la vie d√©mocratique.")
    st.write("Pour pr√©dire les r√©sultats des √©lections de 2024, nous avons utilis√© des algorithmes de machine learning, une technologie d'intelligence artificielle qui nous a permis d'analyser les tendances pass√©es et de faire des projections pour 2024. L'algorithme pr√©sente quelques limites dans le sens o√π il ne prend pas en compte le climat politique et social actuel. Vous trouverez ci-dessous nos pr√©visions que nous avons compar√©es au sondage Ipsos r√©alis√© au d√©but du mois de mars 2024.")

    # Load data
    url = "https://github.com/AliciaD31/elections-nostradamus/blob/main/predictions2024_Python.csv?raw=true"
    df = pd.read_csv(url)

    # Renomme les orientations politiques
    df['Orientation politique'] = df['Orientation politique'].replace({
        'extreme_gauche': 'Extr√™me gauche',
        'gauche': 'Gauche',
        'centre_gauche': 'Centre gauche',
        'centre': 'Centre',
        'centre_droite': 'Centre droite',
        'droite': 'Droite',
        'extreme_droite': 'Extr√™me droite',
        'divers': 'Divers'
    })

    # Define colors for each category
    colors = {
        'Divers': '#EEEEEE',
        'Extr√™me droite': '#242F7F',
        'Droite': '#0066CC',
        'Centre droite': '#82A2C6',
        'Centre': '#ffcc00ff',
        'Centre gauche': '#F3D79A',
        'Gauche': '#FF8080',
        'Extr√™me gauche': '#BB0000'
    }

    # Sort dataframe by the percentages
    df_sorted_sondages = df.sort_values(by='Sondages_2024', ascending=True)
    df_sorted = df.sort_values(by='predictions_2024', ascending=True)

    # Display the predictions and sondages plots side by side
    col1, col2 = st.columns(2)

    # Plot for predictions_2024
    with col1:
        fig1, ax1 = plt.subplots(figsize=(8, 8))
        ax1.barh(df_sorted['Orientation politique'], df_sorted['predictions_2024'], color=[colors.get(x, '#FFFFFF') for x in df_sorted['Orientation politique']])
        ax1.set_title('Pr√©dictions Nostradamus')
        ax1.set_xlabel('Pourcentage de votes')
        ax1.set_ylabel('Orientation politique')
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)
        ax1.spines['bottom'].set_visible(False)
        ax1.spines['left'].set_visible(False)
        for index, value in enumerate(df_sorted['predictions_2024']):
            ax1.text(value, index, f'{value}%', va='center')
        st.pyplot(fig1)

    # Plot for Sondages_2024
    with col2:
        fig2, ax2 = plt.subplots(figsize=(8, 8))
        ax2.barh(df_sorted_sondages['Orientation politique'], df_sorted_sondages['Sondages_2024'], color=[colors.get(x, '#FFFFFF') for x in df_sorted_sondages['Orientation politique']])
        ax2.set_title('Sondages Ipsos - 1-6 mars 2024 - 5169 r√©pondants')
        ax2.set_xlabel('Pourcentage de votes')
        ax2.set_ylabel('Orientation politique')
        ax2.spines['top'].set_visible(False)
        ax2.spines['right'].set_visible(False)
        ax2.spines['bottom'].set_visible(False)
        ax2.spines['left'].set_visible(False)
        for index, value in enumerate(df_sorted_sondages['Sondages_2024']):
            ax2.text(value, index, f'{value}%', va='center')
        st.pyplot(fig2)

    # R√©partition
    st.subheader("R√©partion par orientation politique")
    
    st.write("Durant les 20 derni√®res annn√©es d'√©lections europ√©ennes, les noms des partis et nuances politiques ont chang√© consid√©rablement. Pour pouvoir √™tre coh√©rent dans nos analyses et dans nos pr√©dictions, nous avons d√©cid√© de les classer par orientation politique. Nous avons utilis√© le site internet de chacun de ces partis et les informations de l'Assembl√©e Nationale pour effectuer ce tri.")
    data = {
        2004: {
            'Extr√™me gauche': "LPC, LXG",
            'Gauche': "LPS, LDG",
            'Centre gauche': "LEC, LVE",
            'Centre': "-",
            'Centre droite': "LUDF",
            'Droite': "LUMP, LCP, LDD",
            'Extr√™me droite': "LFN, LXD",
            'Divers': "LDV, LRG"
        },
        2009: {
            'Extr√™me gauche': "LEXG, LCOP",
            'Gauche': "LSOC, LDVD",
            'Centre gauche': "LVEC",
            'Centre': "-",
            'Centre droite': "LUCD",
            'Droite': "LUMP, LDVD",
            'Extr√™me droite': "LFN",
            'Divers': "LCOP, LREG"
        },
        2014: {
            'Extr√™me gauche': "LFG",
            'Gauche': "LUG",
            'Centre gauche': "LUG",
            'Centre': "-",
            'Centre droite': "LUD",
            'Droite': "LUD",
            'Extr√™me droite': "LFN",
            'Divers': "LDVD, LDIV"
        },
        2019: {
            'Extr√™me gauche': "LFG",
            'Gauche': "LUG",
            'Centre gauche': "LUG",
            'Centre': "-",
            'Centre droite': "LUD",
            'Droite': "LUD",
            'Extr√™me droite': "LRN",
            'Divers': "LDVD, LDIV"
        }
    }

    df = pd.DataFrame(data)
    st.table(df)
    # Countdown jusqu'au 1er Mai √† minuit
    target_datetime = datetime(datetime.now().year, 5, 1, 0, 0)

    countdown_placeholder = st.sidebar.empty()

    while datetime.now() < target_datetime:
        remaining_time = target_datetime - datetime.now()
        days = remaining_time.days
        hours, remainder = divmod(remaining_time.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        time_remaining = f"{days} jours, {hours} heures, {minutes} minutes, {seconds} secondes"
        
        countdown_placeholder.markdown("<div style='background-color: #FFD700; padding: 8px; border-radius: 5px;'>"
                                       "<div style='color: black; font-size: small;'>"
                                       f"<p>{time_remaining}</p>"
                                       "</div>"
                                       "</div>", unsafe_allow_html=True)
        
        time.sleep(1)

if __name__ == '__main__':
    main()
